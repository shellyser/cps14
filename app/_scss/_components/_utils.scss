/* These mixins handle IE < 9, which doesn't respond to media queries.
  To "activate" them in ye-olde-ie stylesheet, set $dim to NUMpx and
  set $ye-olde-ie to a version number and then import the main stylesheet. */

// generates media queries based on min screen width, or straight css if $dim

$dim: false !default;

@mixin break-min($width) {
  @if $dim {
    @if $dim >= $width {
      @content;
    }
  }
  @else {
    @media screen and (min-width: $width) {
      @content;
    }
  }
}

@mixin break-max($width) {
  @if $dim {
    @if $dim < $width - 1 {
      @content;
    }
  }
  @else {
    @media screen and (max-width: $width - 1) {
      @content;
    }
  }
}

@mixin break-between($min, $max) {
  @if $dim {
    @if $dim >= $min {
      @if $dim < $max {
        @content;
      }
    }
  }
  @else {
    @media screen and (min-width: $min) and (max-width: $max) {
      @content;
    }
  }
}

// easier than writing out the pixel ratio media queries manually
// use this to serve retina-friendly images
@mixin retina{
  @if $dim == false{
    @media (-webkit-min-device-pixel-ratio: 2){
      @content
    }
    @media (min--moz-device-pixel-ratio: 2){
      @content
    }
    @media (-o-min-device-pixel-ratio: 2){
      @content
    }
  }
}

// provides fallback px notation for stylesheets for browsers that don't recognize rems
$base-font-size: false !default;
 
@function rem($val){
  @if $base-font-size == false{
    @return $val + rem;
  }
  @else{
    @return $val*$base-font-size + px;
  }
}

// cross-browser-compatible pseudo-elements (ieb/iea are designed to be used with https://github.com/kevindees/ie7_pseudo_elements to generate pseudo pseudo-elements for IE7)
@mixin before{
  &::before{
    @content
  }
  &:before{
    @content
  }
  > ieb{
    @content
  }
}
 
@mixin after{
  &::after{
    @content
  }
  &:after{
    @content
  }
  > iea{
    @content
  }
}

